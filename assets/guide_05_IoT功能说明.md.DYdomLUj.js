import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.BGWP4WZ_.js";const p="/py-xiaozhi/assets/home_assistatnt%E9%85%8D%E7%BD%AE.CCo9voiC.png",t="/py-xiaozhi/assets/%E8%AE%BE%E5%A4%87%E9%80%89%E6%8B%A9.nYCdwh08.png",h="/py-xiaozhi/assets/%E5%AF%BC%E5%85%A5ha.dbMVBvud.png",u=JSON.parse('{"title":"IoT功能说明","description":"","frontmatter":{},"headers":[],"relativePath":"guide/05_IoT功能说明.md","filePath":"guide/05_IoT功能说明.md"}'),e={name:"guide/05_IoT功能说明.md"};function k(r,s,E,o,d,g){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="iot功能说明" tabindex="-1">IoT功能说明 <a class="header-anchor" href="#iot功能说明" aria-label="Permalink to &quot;IoT功能说明&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>py-xiaozhi项目中的IoT（物联网）模块提供了一个灵活、可扩展的设备控制框架，支持通过语音命令控制多种虚拟和物理设备。本文档详细介绍IoT模块的架构、使用方法以及如何扩展自定义设备。 如需执行完立马同步状态和播报结果请参考相机模块和温湿度模块</p><h2 id="核心架构" tabindex="-1">核心架构 <a class="header-anchor" href="#核心架构" aria-label="Permalink to &quot;核心架构&quot;">​</a></h2><p>IoT模块采用分层设计，由以下主要组件构成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── iot                          # IoT设备相关模块</span></span>
<span class="line"><span>│   ├── things                   # 具体设备实现目录 </span></span>
<span class="line"><span>│   │   ├── lamp.py              # 灯设备实现</span></span>
<span class="line"><span>│   │   ├── speaker.py           # 音量控制实现</span></span>
<span class="line"><span>│   │   ├── music_player.py      # 音乐播放器实现</span></span>
<span class="line"><span>│   │   ├── countdown_timer.py   # 倒计时器实现</span></span>
<span class="line"><span>│   │   ├── ha_control.py        # Home Assistant设备控制</span></span>
<span class="line"><span>│   │   ├── CameraVL/            # 摄像头与视觉识别集成设备</span></span>
<span class="line"><span>│   │   ├── temperature_sensor.py# 温度传感器实现</span></span>
<span class="line"><span>│   │   └── query_bridge_rag.py  # RAG检索桥接设备</span></span>
<span class="line"><span>│   ├── thing.py                 # IoT设备基类和工具类定义</span></span>
<span class="line"><span>│   │   ├── Thing                # IoT设备抽象基类</span></span>
<span class="line"><span>│   │   ├── Property             # 设备属性类</span></span>
<span class="line"><span>│   │   ├── Parameter            # 设备方法参数类</span></span>
<span class="line"><span>│   │   └── Method               # 设备方法类</span></span>
<span class="line"><span>│   └── thing_manager.py         # IoT设备管理器</span></span>
<span class="line"><span>│       └── ThingManager         # 单例模式实现的设备管理器</span></span></code></pre></div><h3 id="核心类说明" tabindex="-1">核心类说明 <a class="header-anchor" href="#核心类说明" aria-label="Permalink to &quot;核心类说明&quot;">​</a></h3><ol><li><p><strong>Thing（设备基类）</strong>：</p><ul><li>所有IoT设备的抽象基类</li><li>提供属性和方法的注册机制</li><li>提供状态和描述的JSON序列化</li></ul></li><li><p><strong>Property（属性类）</strong>：</p><ul><li>定义设备的可变状态（如开/关、亮度等）</li><li>支持布尔、数字和字符串三种基本类型</li><li>使用getter回调实时获取设备状态</li></ul></li><li><p><strong>Method（方法类）</strong>：</p><ul><li>定义设备可执行的操作（如打开、关闭等）</li><li>支持带参数的方法调用</li><li>通过callback处理具体操作实现</li></ul></li><li><p><strong>Parameter（参数类）</strong>：</p><ul><li>定义方法的参数规范</li><li>包含名称、描述、类型和是否必需等信息</li></ul></li><li><p><strong>ThingManager（设备管理器）</strong>：</p><ul><li>集中管理所有IoT设备实例</li><li>处理设备注册和命令分发</li><li>提供设备描述和状态查询接口</li></ul></li></ol><h2 id="命令处理流程" tabindex="-1">命令处理流程 <a class="header-anchor" href="#命令处理流程" aria-label="Permalink to &quot;命令处理流程&quot;">​</a></h2><p>以下是语音命令被处理并执行IoT设备控制的完整流程：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                              |    用户语音指令    |</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                                       |</span></span>
<span class="line"><span>                                       v</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                              |     语音识别      |</span></span>
<span class="line"><span>                              |     (STT)        |</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                                       |</span></span>
<span class="line"><span>                                       v</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                              |    语义理解       |</span></span>
<span class="line"><span>                              |    (LLM)         |</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                                       |</span></span>
<span class="line"><span>                                       v</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                              |   物联网命令生成   |</span></span>
<span class="line"><span>                              +-------------------+</span></span>
<span class="line"><span>                                       |</span></span>
<span class="line"><span>                                       v</span></span>
<span class="line"><span>+------------------------------+       |       +------------------------------+</span></span>
<span class="line"><span>|    WebSocket服务端处理        |       |       |     Application._handle_iot_message()</span></span>
<span class="line"><span>|                             &lt;--------+-------&gt;                             |</span></span>
<span class="line"><span>+------------------------------+               +------------------------------+</span></span>
<span class="line"><span>                                                           |</span></span>
<span class="line"><span>                                                           v</span></span>
<span class="line"><span>                                               +------------------------------+</span></span>
<span class="line"><span>                                               |   ThingManager.invoke()      |</span></span>
<span class="line"><span>                                               +------------------------------+</span></span>
<span class="line"><span>                                                           |</span></span>
<span class="line"><span>                      +-------------------------+----------+------------+</span></span>
<span class="line"><span>                      |                         |                       |</span></span>
<span class="line"><span>                      v                         v                       v</span></span>
<span class="line"><span>      +---------------+-------+    +------------+---------+   +---------+----------+</span></span>
<span class="line"><span>      |       Lamp            |    |      Speaker         |   |    MusicPlayer     |</span></span>
<span class="line"><span>      | (控制灯设备)           |    | (控制系统音量)        |   | (音乐播放器)        |</span></span>
<span class="line"><span>      +---------------+-------+    +------------+---------+   +---------+----------+</span></span>
<span class="line"><span>                      |                         |                       |</span></span>
<span class="line"><span>                      v                         v                       v</span></span>
<span class="line"><span>      +---------------+-------+    +------------+---------+   +---------+----------+</span></span>
<span class="line"><span>      |  执行设备相关操作      |    |   执行设备相关操作     |   |  执行设备相关操作   |</span></span>
<span class="line"><span>      +---------------+-------+    +------------+---------+   +---------+----------+</span></span>
<span class="line"><span>                      |                         |                       |</span></span>
<span class="line"><span>                      +-------------------------+-----------------------+</span></span>
<span class="line"><span>                                               |</span></span>
<span class="line"><span>                                               v</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span>
<span class="line"><span>                                   |    更新设备状态              |</span></span>
<span class="line"><span>                                   |    Application._update_iot_states()</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span>
<span class="line"><span>                                               |</span></span>
<span class="line"><span>                                               v</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span>
<span class="line"><span>                                   |   发送状态更新到服务器       |</span></span>
<span class="line"><span>                                   |   send_iot_states()         |</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span>
<span class="line"><span>                                               |</span></span>
<span class="line"><span>                                               v</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span>
<span class="line"><span>                                   |     语音或界面反馈结果       |</span></span>
<span class="line"><span>                                   +-----------------------------+</span></span></code></pre></div><h2 id="内置设备说明" tabindex="-1">内置设备说明 <a class="header-anchor" href="#内置设备说明" aria-label="Permalink to &quot;内置设备说明&quot;">​</a></h2><h3 id="_1-灯设备-lamp" tabindex="-1">1. 灯设备 (Lamp) <a class="header-anchor" href="#_1-灯设备-lamp" aria-label="Permalink to &quot;1. 灯设备 (Lamp)&quot;">​</a></h3><p>虚拟灯设备，用于演示基本的IoT控制功能。</p><p><strong>属性</strong>：</p><ul><li><code>power</code>：灯的开关状态（布尔值）</li></ul><p><strong>方法</strong>：</p><ul><li><code>TurnOn</code>：打开灯</li><li><code>TurnOff</code>：关闭灯</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;打开灯&quot;</li><li>&quot;关闭灯&quot;</li></ul><h3 id="_2-系统音量控制-speaker" tabindex="-1">2. 系统音量控制 (Speaker) <a class="header-anchor" href="#_2-系统音量控制-speaker" aria-label="Permalink to &quot;2. 系统音量控制 (Speaker)&quot;">​</a></h3><p>控制系统音量的设备，可调整应用程序的音量大小。</p><p><strong>属性</strong>：</p><ul><li><code>volume</code>：当前音量值（0-100）</li></ul><p><strong>方法</strong>：</p><ul><li><code>SetVolume</code>：设置音量级别</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;把音量调到50%&quot;</li><li>&quot;音量调小一点&quot;</li><li>&quot;音量调大&quot;</li></ul><h3 id="_3-音乐播放器-musicplayer" tabindex="-1">3. 音乐播放器 (MusicPlayer) <a class="header-anchor" href="#_3-音乐播放器-musicplayer" aria-label="Permalink to &quot;3. 音乐播放器 (MusicPlayer)&quot;">​</a></h3><p>功能丰富的在线音乐播放器，支持歌曲搜索、播放控制和歌词显示。</p><p><strong>属性</strong>：</p><ul><li><code>current_song</code>：当前播放的歌曲</li><li><code>playing</code>：播放状态</li><li><code>total_duration</code>：歌曲总时长</li><li><code>current_position</code>：当前播放位置</li><li><code>progress</code>：播放进度</li></ul><p><strong>方法</strong>：</p><ul><li><code>Play</code>：播放指定歌曲</li><li><code>Pause</code>：暂停播放</li><li><code>GetDuration</code>：获取播放信息</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;播放音乐周杰伦的稻香，通过iot音乐播放器播放&quot;</li><li>&quot;暂停播放&quot;</li><li>&quot;播放下一首&quot;</li></ul><h3 id="_4-倒计时器-countdowntimer" tabindex="-1">4. 倒计时器 (CountdownTimer) <a class="header-anchor" href="#_4-倒计时器-countdowntimer" aria-label="Permalink to &quot;4. 倒计时器 (CountdownTimer)&quot;">​</a></h3><p>一个用于延迟执行命令的倒计时器设备，可以设置定时任务。</p><p><strong>属性</strong>：</p><ul><li>无可查询属性</li></ul><p><strong>方法</strong>：</p><ul><li><code>StartCountdown</code>：启动一个倒计时，结束后执行指定命令 <ul><li><code>command</code>：要执行的IoT命令（JSON格式字符串）</li><li><code>delay</code>：延迟时间（秒），默认为5秒</li></ul></li><li><code>CancelCountdown</code>：取消指定的倒计时 <ul><li><code>timer_id</code>：要取消的计时器ID</li></ul></li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;设置5秒后打开灯&quot;</li><li>&quot;10秒后把音量调到70%&quot;</li><li>&quot;取消倒计时3&quot;</li></ul><h3 id="_5-温度传感器-temperaturesensor" tabindex="-1">5. 温度传感器 (TemperatureSensor) <a class="header-anchor" href="#_5-温度传感器-temperaturesensor" aria-label="Permalink to &quot;5. 温度传感器 (TemperatureSensor)&quot;">​</a></h3><p>通过MQTT协议连接的温湿度传感器设备，可以实时获取环境温湿度数据。</p><p><strong>属性</strong>：</p><ul><li><code>temperature</code>：当前温度（摄氏度）</li><li><code>humidity</code>：当前湿度（%）</li><li><code>last_update_time</code>：最后更新时间（时间戳）</li></ul><p><strong>方法</strong>：</p><ul><li>无可调用方法，设备自动通过MQTT接收数据并更新状态</li></ul><p><strong>特殊功能</strong>：</p><ul><li>当接收到新的温湿度数据时，会自动通过语音播报结果</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;查询当前室内温度&quot;</li><li>&quot;室内湿度是多少&quot;</li><li>&quot;温湿度传感器状态&quot;</li></ul><h3 id="_6-home-assistant设备控制-homeassistantdevice" tabindex="-1">6. Home Assistant设备控制 (HomeAssistantDevice) <a class="header-anchor" href="#_6-home-assistant设备控制-homeassistantdevice" aria-label="Permalink to &quot;6. Home Assistant设备控制 (HomeAssistantDevice)&quot;">​</a></h3><p>通过HTTP API连接到Home Assistant智能家居平台，控制各种智能设备。</p><h4 id="_6-1-homeassistant灯设备-homeassistantlight" tabindex="-1">6.1 HomeAssistant灯设备 (HomeAssistantLight) <a class="header-anchor" href="#_6-1-homeassistant灯设备-homeassistantlight" aria-label="Permalink to &quot;6.1 HomeAssistant灯设备 (HomeAssistantLight)&quot;">​</a></h4><p><strong>属性</strong>：</p><ul><li><code>state</code>：灯的状态（on/off）</li><li><code>brightness</code>：灯的亮度（0-100）</li><li><code>last_update</code>：最后更新时间戳</li></ul><p><strong>方法</strong>：</p><ul><li><code>TurnOn</code>：打开灯</li><li><code>TurnOff</code>：关闭灯</li><li><code>SetBrightness</code>：设置灯的亮度 <ul><li><code>brightness</code>：亮度值（0-100%）</li></ul></li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;打开客厅灯&quot;</li><li>&quot;把卧室灯亮度调到60%&quot;</li><li>&quot;关闭所有灯&quot;</li></ul><h4 id="_6-2-homeassistant开关-homeassistantswitch" tabindex="-1">6.2 HomeAssistant开关 (HomeAssistantSwitch) <a class="header-anchor" href="#_6-2-homeassistant开关-homeassistantswitch" aria-label="Permalink to &quot;6.2 HomeAssistant开关 (HomeAssistantSwitch)&quot;">​</a></h4><p><strong>属性</strong>：</p><ul><li><code>state</code>：开关状态（on/off）</li><li><code>last_update</code>：最后更新时间戳</li></ul><p><strong>方法</strong>：</p><ul><li><code>TurnOn</code>：打开开关</li><li><code>TurnOff</code>：关闭开关</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;打开电风扇&quot;</li><li>&quot;关闭空调&quot;</li></ul><h4 id="_6-3-homeassistant数值控制器-homeassistantnumber" tabindex="-1">6.3 HomeAssistant数值控制器 (HomeAssistantNumber) <a class="header-anchor" href="#_6-3-homeassistant数值控制器-homeassistantnumber" aria-label="Permalink to &quot;6.3 HomeAssistant数值控制器 (HomeAssistantNumber)&quot;">​</a></h4><p><strong>属性</strong>：</p><ul><li><code>state</code>：当前状态（on/off）</li><li><code>value</code>：当前数值</li><li><code>min_value</code>：最小值</li><li><code>max_value</code>：最大值</li><li><code>last_update</code>：最后更新时间戳</li></ul><p><strong>方法</strong>：</p><ul><li><code>TurnOn</code>：打开设备</li><li><code>TurnOff</code>：关闭设备</li><li><code>SetValue</code>：设置数值 <ul><li><code>value</code>：要设置的数值</li></ul></li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;把空调温度设为26度&quot;</li><li>&quot;将风扇转速调到3档&quot;</li></ul><h4 id="_6-4-homeassistant按钮-homeassistantbutton" tabindex="-1">6.4 HomeAssistant按钮 (HomeAssistantButton) <a class="header-anchor" href="#_6-4-homeassistant按钮-homeassistantbutton" aria-label="Permalink to &quot;6.4 HomeAssistant按钮 (HomeAssistantButton)&quot;">​</a></h4><p><strong>属性</strong>：</p><ul><li><code>state</code>：当前状态（on/off，通常为虚拟状态）</li><li><code>last_update</code>：最后更新时间戳</li></ul><p><strong>方法</strong>：</p><ul><li><code>TurnOn</code>：激活按钮（执行Press操作）</li><li><code>TurnOff</code>：形式方法，大多数情况下无实际效果</li><li><code>Press</code>：按下按钮，触发按钮关联的动作</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;按下门铃按钮&quot;</li><li>&quot;触发紧急模式&quot;</li><li>&quot;启动场景播放&quot;</li></ul><h3 id="_7-摄像头与视觉识别-cameravl" tabindex="-1">7. 摄像头与视觉识别 (CameraVL) <a class="header-anchor" href="#_7-摄像头与视觉识别-cameravl" aria-label="Permalink to &quot;7. 摄像头与视觉识别 (CameraVL)&quot;">​</a></h3><p>集成摄像头控制和视觉识别功能，可以捕获画面并进行智能分析。</p><p><strong>功能</strong>：</p><ul><li>摄像头开启/关闭</li><li>画面智能识别</li><li>视觉内容分析</li></ul><p><strong>语音命令示例</strong>：</p><ul><li>&quot;打开摄像头&quot;</li><li>&quot;识别画面&quot;</li><li>&quot;关闭摄像头&quot;</li></ul><h2 id="扩展自定义设备" tabindex="-1">扩展自定义设备 <a class="header-anchor" href="#扩展自定义设备" aria-label="Permalink to &quot;扩展自定义设备&quot;">​</a></h2><p>要添加新的IoT设备，需要遵循以下步骤：</p><h3 id="_1-创建设备类" tabindex="-1">1. 创建设备类 <a class="header-anchor" href="#_1-创建设备类" aria-label="Permalink to &quot;1. 创建设备类&quot;">​</a></h3><p>在<code>src/iot/things/</code>目录下创建新的Python文件，定义设备类：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.iot.thing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thing, Parameter, ValueType</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Thing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    自定义IoT设备实现示例</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    此类演示了如何创建一个符合项目IoT架构的自定义设备，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    包括属性定义、方法注册以及实际功能实现</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 调用父类初始化方法，设置设备名称和描述</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 第一个参数是设备ID(全局唯一)，第二个参数是对设备的描述文本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomDevice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义设备描述&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 设备状态变量定义</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 定义设备的开关状态，初始为关闭(False)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parameter_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 定义设备的参数值，初始为0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 记录最后一次状态更新的时间戳</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 设备初始化日志</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[IoT设备] 自定义设备初始化完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # =========================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册设备属性（状态值）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # =========================</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册status属性，使其可被查询</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数1: 属性名称 - 在JSON中显示的键名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数2: 属性描述 - 对此属性的解释说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数3: getter回调函数 - 用于实时获取属性值的lambda函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_property(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设备开关状态(True为开启，False为关闭)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册parameter_value属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_property(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parameter_value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设备参数值(0-100)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parameter_value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册last_update_time属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_property(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_update_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;最后一次状态更新时间&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # =========================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册设备方法（可执行的操作）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # =========================</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册TurnOn方法，用于打开设备</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数1: 方法名称 - 用于API调用的标识符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数2: 方法描述 - 对此方法功能的说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数3: 参数列表 - 空列表表示无参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数4: 回调函数 - 执行实际功能的lambda函数，调用内部的_turn_on方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_method(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;TurnOn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法名称</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;打开设备&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法描述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [],  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 无参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._turn_on()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回调函数，调用内部的_turn_on方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册TurnOff方法，用于关闭设备</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_method(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;TurnOff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;关闭设备&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [], </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._turn_off()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册SetParameter方法，用于设置参数值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 此方法需要一个参数value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_method(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;SetParameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;设置设备参数值(范围0-100)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 定义方法所需参数:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 创建参数对象: </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 参数1: 参数名称 - API中的参数键名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 参数2: 参数描述 - 对此参数的说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 参数3: 参数类型 - 值类型(NUMBER表示数字类型)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 参数4: 是否必需 - True表示此参数必须提供</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Parameter(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数值(0-100之间的数字)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ValueType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUMBER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 回调函数 - 从params字典中提取参数值并传递给_set_parameter方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._set_parameter(params[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].get_value())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册GetStatus方法，用于获取设备状态信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add_method(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;GetStatus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;获取设备完整状态信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [],  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 无参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._get_status()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # =========================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 内部方法实现（实际功能）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # =========================</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _turn_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        打开设备的内部实现方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        返回:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            dict: 包含操作状态和消息的字典</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 修改设备状态为开启</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.time())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新状态变更时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这里可以添加实际的硬件控制代码，如GPIO操作、串口通信等</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[IoT设备] 自定义设备已打开&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回操作结果，包含状态和消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 操作状态: success或error</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设备已打开&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 操作结果消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _turn_off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        关闭设备的内部实现方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        返回:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            dict: 包含操作状态和消息的字典</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 修改设备状态为关闭</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.time())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新状态变更时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这里可以添加实际的硬件控制代码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[IoT设备] 自定义设备已关闭&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回操作结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设备已关闭&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _set_parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        设置设备参数值的内部实现方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        参数:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            value (float): 要设置的参数值</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        返回:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            dict: 包含操作状态和消息的字典</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        异常:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            ValueError: 如果参数值超出有效范围</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 参数值验证</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数必须是数字&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数值必须在0-100之间&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 设置参数值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parameter_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.time())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新状态变更时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这里可以添加实际的参数设置代码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[IoT设备] 自定义设备参数已设置为: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回操作结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数已设置为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _get_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        获取设备完整状态的内部实现方法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        返回:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            dict: 包含设备所有状态信息的字典</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回设备的完整状态信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;device_status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;is_on&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parameter_value,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;last_update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last_update_time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 2. 注册设备</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在程序启动时注册设备到ThingManager：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">\`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在Application._initialize_iot_devices方法中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.iot.thing_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThingManager</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.iot.things.my_custom_device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCustomDevice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.utils.logging_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_logger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取日志记录器实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_logger(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _initialize_iot_devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    初始化并注册所有IoT设备</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    此方法在应用程序启动时被调用</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 记录日志：开始初始化IoT设备</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开始初始化IoT设备...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 获取设备管理器单例实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ThingManager使用单例模式，确保全局只有一个管理器实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thing_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThingManager.get_instance()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 创建自定义设备实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my_device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCustomDevice()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 将设备实例添加到设备管理器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 一旦添加，设备将可以通过API和语音命令访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thing_manager.add_thing(my_device)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 记录成功添加设备的日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;已添加自定义设备: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_device.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 可以在这里继续添加其他设备...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 记录设备初始化完成的日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IoT设备初始化完成，共注册了 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thing_manager.things)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 个设备&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-设备通信-可选" tabindex="-1">3. 设备通信（可选） <a class="header-anchor" href="#_3-设备通信-可选" aria-label="Permalink to &quot;3. 设备通信（可选）&quot;">​</a></h3><p>如果设备需要与实体硬件通信，可以通过各种协议实现：</p><ul><li>MQTT：用于与标准物联网设备通信</li><li>HTTP：用于REST API调用</li><li>串口/GPIO：用于直接硬件控制</li></ul><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><h3 id="基本设备控制" tabindex="-1">基本设备控制 <a class="header-anchor" href="#基本设备控制" aria-label="Permalink to &quot;基本设备控制&quot;">​</a></h3><ol><li>启动应用程序</li><li>使用语音指令&quot;打开灯&quot;</li><li>系统识别指令并执行lamp.py中的TurnOn方法</li><li>灯设备状态更新，反馈给用户&quot;灯已打开&quot;</li></ol><h3 id="音乐播放控制" tabindex="-1">音乐播放控制 <a class="header-anchor" href="#音乐播放控制" aria-label="Permalink to &quot;音乐播放控制&quot;">​</a></h3><ol><li>使用指令&quot;播放音乐周杰伦的稻香，通过iot音乐播放器播放&quot;</li><li>系统解析指令并调用MusicPlayer的Play方法</li><li>播放器搜索歌曲，开始播放，并显示歌词</li><li>可以继续使用&quot;暂停播放&quot;等命令控制播放</li></ol><h3 id="倒计时控制示例" tabindex="-1">倒计时控制示例 <a class="header-anchor" href="#倒计时控制示例" aria-label="Permalink to &quot;倒计时控制示例&quot;">​</a></h3><ol><li>使用指令&quot;设置5秒后打开灯&quot;</li><li>系统解析指令并调用CountdownTimer的StartCountdown方法</li><li>5秒后自动执行打开灯的命令</li><li>返回操作结果&quot;倒计时已设置&quot;</li></ol><h3 id="home-assistant设备控制示例" tabindex="-1">Home Assistant设备控制示例 <a class="header-anchor" href="#home-assistant设备控制示例" aria-label="Permalink to &quot;Home Assistant设备控制示例&quot;">​</a></h3><ol><li>使用指令&quot;把客厅灯调暗一点&quot;</li><li>系统解析指令并调用HomeAssistantLight的SetBrightness方法</li><li>通过HTTP API向Home Assistant发送亮度调整命令</li><li>返回操作结果&quot;客厅灯亮度已调整&quot;</li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>设备属性更新后，会自动通过WebSocket推送状态到服务端和UI界面</li><li>设备方法的实现应该考虑异步操作，避免阻塞主线程</li><li>参数类型和格式应严格遵循ValueType中定义的类型</li><li>新增设备时应确保设备ID全局唯一</li><li>所有设备方法应该实现适当的错误处理和反馈机制</li></ol><h2 id="高级主题-home-assistant集成" tabindex="-1">高级主题：Home Assistant集成 <a class="header-anchor" href="#高级主题-home-assistant集成" aria-label="Permalink to &quot;高级主题：Home Assistant集成&quot;">​</a></h2><h3 id="通过http-api控制home-assistant" tabindex="-1">通过HTTP API控制Home Assistant <a class="header-anchor" href="#通过http-api控制home-assistant" aria-label="Permalink to &quot;通过HTTP API控制Home Assistant&quot;">​</a></h3><p>Home Assistant是一个流行的开源家庭自动化平台，本项目通过HTTP API与Home Assistant集成，支持控制各种智能设备。以下是Home Assistant集成的关键点：</p><ol><li><strong>配置文件设置</strong></li></ol><p>在<code>config/config.json</code>中添加Home Assistant配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;HOME_ASSISTANT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://your-homeassistant-url:8123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;TOKEN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your-long-lived-access-token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;DEVICES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;entity_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;light.cuco_cn_573924446_v3_s_13_indicator_light&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;friendly_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;米家智能插座3-冰箱  指示灯&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;entity_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;switch.cuco_cn_573924446_v3_on_p_2_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;friendly_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;米家智能插座3-冰箱  开关 开关&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配置ha地址和密钥" tabindex="-1">配置ha地址和密钥 <a class="header-anchor" href="#配置ha地址和密钥" aria-label="Permalink to &quot;配置ha地址和密钥&quot;">​</a></h3><p><img src="`+p+'" alt="Image"></p><h3 id="设备选择" tabindex="-1">设备选择 <a class="header-anchor" href="#设备选择" aria-label="Permalink to &quot;设备选择&quot;">​</a></h3><ul><li>左上角开关处点击可以切换设备类型</li><li>选中设备后天机右下角添加选中设备</li><li>导入后需要重启小智等待程序加载完成就可以通过语音控制了 <img src="'+t+'" alt="Image"></li></ul><h3 id="导入后" tabindex="-1">导入后 <a class="header-anchor" href="#导入后" aria-label="Permalink to &quot;导入后&quot;">​</a></h3><p><img src="'+h+'" alt="Image"> 2. <strong>支持的设备类型</strong></p><ul><li><code>light</code>: 灯设备，支持开关和亮度控制</li><li><code>switch</code>: 开关设备，支持开关控制</li><li><code>number</code>: 数值控制器，支持设置数值</li><li><code>button</code>: 按钮设备，支持按下操作</li></ul><ol start="3"><li><strong>语音命令示例</strong></li></ol><ul><li>&quot;打开客厅灯&quot;</li><li>&quot;把卧室灯调暗一点&quot;</li><li>&quot;将空调温度设为26度&quot;</li><li>&quot;关闭所有灯&quot;</li></ul><h3 id="通信协议限制" tabindex="-1">通信协议限制 <a class="header-anchor" href="#通信协议限制" aria-label="Permalink to &quot;通信协议限制&quot;">​</a></h3><p>当前IoT协议(1.0版本)存在以下限制：</p><ol><li><strong>单向控制流</strong>：大模型只能下发指令，无法立即获取指令执行结果</li><li><strong>状态更新延迟</strong>：设备状态变更需要等到下一轮对话时，通过读取property属性值才能获知</li><li><strong>异步反馈</strong>：如果需要操作结果反馈，必须通过设备属性的方式间接实现</li></ol><h3 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h3><ol><li><p><strong>使用有意义的属性名称</strong>：属性名称应清晰表达其含义，便于大模型理解和使用</p></li><li><p><strong>不产生歧义的方法描述</strong>：为每个方法提供明确的自然语言描述，帮助大模型更准确地理解和调用</p></li></ol>',129)]))}const y=i(e,[["render",k]]);export{u as __pageData,y as default};
